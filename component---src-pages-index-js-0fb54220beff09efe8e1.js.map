{"version":3,"file":"component---src-pages-index-js-0fb54220beff09efe8e1.js","mappings":"wOAwGA,MA7Fc,IAEV,uBAAKA,UAAU,SACb,uBAAKA,UAAU,gBACb,gBAAC,EAAAC,EAAW,CACVD,UAAU,eACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,uDACJC,MAAO,IACPC,OAAQ,IAERC,IAAI,kBAAiB,sBAEvB,2BACE,0BAAI,eACJ,0BAAI,yBACJ,qBAAGC,KAAK,mDAAkD,YAErD,IAAI,KACP,qBAAGA,KAAK,sCAAqC,UAAU,KAAG,IAC5D,qBAAGA,KAAK,4CAA2C,WAGvD,uBAAKR,UAAU,mBACb,0BAAI,eACJ,0BACE,0BAAI,0HAIJ,0BAAI,0EAIJ,0BAAI,qFAGJ,0BAAI,oDAIR,uBAAKA,UAAU,mBACb,0BAAI,iBACJ,0BACE,0BAAI,yBAAG,gBACL,0BACE,0BAAI,oEACJ,0BAAI,sCACJ,0BAAI,0DAGR,0BACE,yBAAG,4DAEH,0BACE,0BAAI,4CACJ,0BAAI,uEACJ,0BAAI,8EACJ,0BAAI,wDACJ,0BAAI,2FACJ,0BAAI,yGAGR,0BAAI,yBAAG,2DACL,0BACE,0BAAI,iDACJ,0BAAI,4DAKZ,uBAAKA,UAAU,mBACb,0BAAI,YACJ,yBAAG,oGAGD,2BACA,2BAAM,sIAGN,2BACA,2BAAM,0HAGN,2BAAM,2B,oBC/BhB,MA1DkB,IAAyB,IAAD,MAAvB,KAAES,EAAI,SAAEC,GAAU,EACnC,MAAMC,GAAkC,QAAtB,EAAAF,EAAKG,KAAKC,oBAAY,aAAtB,EAAwBC,QAAK,QACzCC,EAAQN,EAAKO,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,gBAAC,IAAM,CAACR,SAAUA,EAAUI,MAAOH,GACjC,gBAAC,EAAK,MACN,yBAAG,yBAQP,gBAAC,IAAM,CAACD,SAAUA,EAAUI,MAAOH,GACjC,gBAAC,EAAK,MACN,uBAAKX,UAAU,mBACf,0BAAI,eACJ,sBAAImB,MAAO,CAAEC,UAAU,SACpBL,EAAMM,KAAIC,IACT,MAAMR,EAAQQ,EAAKC,YAAYT,OAASQ,EAAKE,OAAOC,KAEpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,2BACEzB,UAAU,iBACV2B,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAI,CAACC,GAAIR,EAAKE,OAAOC,KAAMM,SAAS,OACnC,wBAAMA,SAAS,YAAYjB,KAG/B,6BAAQQ,EAAKC,YAAYS,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQZ,EAAKC,YAAYY,aAAeb,EAAKc,SAE/CL,SAAS,kBAIZ,MAMJ,EAWN,MAAMM,EAAO,IAAM,gBAAC,IAAG,CAACvB,MAAM,a","sources":["webpack://gatsby-starter-blog/./src/components/about.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst About = () => {\n  return (\n    <div className=\"about\">\n      <div className=\"about-header\">\n        <StaticImage\n          className=\"about-avatar\"\n          layout=\"fixed\"\n          formats={[\"auto\", \"webp\", \"avif\"]}\n          src=\"https://avatars.githubusercontent.com/u/15653983?v=4\"\n          width={250}\n          height={250}\n          // quality={100}\n          alt=\"Profile picture\"\n        />\n        <div>\n          <h1>QA Engineer</h1>\n          <h3>Playwright&Typescript</h3>\n          <a href=\"https://www.linkedin.com/in/berkay-a-319262111/\">\n            Linkedin\n          </a>{\" \"}\n          | <a href=\"https://github.com/berkayalparslan\">Github</a> |{\" \"}\n          <a href=\"mailto:berkayalparslan.contact@gmail.com\">Email</a>\n        </div>\n      </div>\n      <div className=\"content-section\">\n        <h2>My services</h2>\n        <ul>\n          <li>\n            I can start creating an automation test framework from zero for your\n            application, using any technology of your choice.\n          </li>\n          <li>\n            I can maintain already existing automation tests for your\n            application.\n          </li>\n          <li>\n            I can optimize your tests, reduce the execution time, saving both money and time.\n          </li>\n          <li>I can create custom tools based on your needs.</li>\n        </ul>\n      </div>\n\n      <div className=\"content-section\">\n        <h2>My experience</h2>\n        <ul>\n          <li><b>NDA Projects</b>\n            <ul>\n              <li>Automation tests written in Playwright, Typescript and Cucumber.</li>\n              <li>Performed API tests using Postman.</li>\n              <li>Performed basic security tests for web applications.</li>\n            </ul>\n             </li>\n          <li>\n            <b>\n              Gloria Victis: Medieval MMORPG - full-time QA Specialist</b>\n            <ul>\n              <li>Implemented a testing process from zero.</li>\n              <li>Lead QA team consisting of both technical and non-technical people.</li>\n              <li>Improved application quality efficiently by applying white-box techniques.</li>\n              <li>Debugged code, fixed low and medium priority issues.</li>\n              <li>Improved application performance by finding performance issues using built-in profiler.</li>\n              <li>Developed a report processing tool, allowing QA team to process more player reports on daily basis.</li>\n            </ul>\n          </li>\n          <li><b>Siege Survival: Gloria Victis - full-time QA Specialist</b>\n            <ul>\n              <li>Performed tests for AI, load and save system.</li>\n              <li>Debugged code, fixed low and medium priority issues.</li>\n            </ul>\n          </li>\n        </ul>\n      </div>\n      <div className=\"content-section\">\n        <h2>About me</h2>\n        <p>\n          I specialize in web applications and test automation, primarily using\n          Playwright with Typescript.\n          <br />\n          <br />\n          I'm deeply engaged in the technical aspects of software development\n          and am committed to further specializing in this dynamic field.\n          <br />\n          <br />\n          Outside of work, I usually cycle. I'm passionate about technology and\n          science, and I actively follow open-source world.\n          <br />\n          And yes, I love cats!\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default About\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport About from \"../components/about\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <About/>\n        <p>\n          No blog posts found.\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <About/>\n      <div className=\"content-section\">\n      <h2>My articles</h2>\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n      </div>\n      \n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["className","S","layout","formats","src","width","height","alt","href","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","nodes","length","style","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt","Head"],"sourceRoot":""}